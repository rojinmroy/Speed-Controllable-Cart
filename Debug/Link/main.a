;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;interrupt [5] void timer2_ovf_isr(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0030 // Place your code here
; 0000 0031 PORTD.4=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0032 PORTD.5=1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0033 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;interrupt [4] void timer2_comp_isr(void)
; 0000 0037 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038 // Place your code here
; 0000 0039 PORTD.4=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003A PORTD.5=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003B }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;unsigned char read_adc(unsigned char adc_input)
; 0000 0043 {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0044 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;	adc_input -> R17
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0045 // Delay needed for the stabilization of the ADC input voltage
; 0000 0046 delay_us(10);
;PCODE: $00000026 VOL: 0
; 0000 0047 // Start the AD conversion
; 0000 0048 ADCSRA|=(1<<ADSC);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0049 // Wait for the AD conversion to complete
; 0000 004A while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 004B ADCSRA|=(1<<ADIF);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004C return ADCH;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004D }
;PCODE: $00000034 VOL: 0
;void forward()
; 0000 0050 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0051 PORTD.4=1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0052 PORTD.3=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0053 PORTD.2=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0054 
; 0000 0055 PORTD.5=1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0056 PORTB.7=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057 PORTB.6=0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0058 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;void reverse()
; 0000 005B {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005C //PORTD.4=1;
; 0000 005D PORTD.3=1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005E PORTD.2=0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005F 
; 0000 0060 //PORTD.5=1;
; 0000 0061 PORTB.7=0;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0062 PORTB.6=1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0063 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;void right()
; 0000 0066 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0067 //PORTD.4=0;
; 0000 0068 PORTD.3=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0069 PORTD.2=1;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006A 
; 0000 006B //PORTD.5=1;
; 0000 006C PORTB.7=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 006D PORTB.6=1;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006E }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;void left()
; 0000 0071 {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0072 //PORTD.4=1;
; 0000 0073 PORTD.3=1;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0074 PORTD.2=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0075 
; 0000 0076 //PORTD.5=1;
; 0000 0077 PORTB.7=1;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0078 PORTB.6=0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0079 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;void stop()
; 0000 007C {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007D PORTD.4=0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007E PORTD.3=1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 007F PORTD.2=0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0080 
; 0000 0081 PORTD.5=0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0082 PORTB.7=1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0083 PORTB.6=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0084 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;void main(void)
; 0000 0087 {
;PCODE: $00000079 VOL: 0
; 0000 0088 // Declare your local variables here
; 0000 0089 
; 0000 008A // Input/Output Ports initialization
; 0000 008B // Port B initialization
; 0000 008C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 008D DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 008E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 008F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0090 
; 0000 0091 // Port C initialization
; 0000 0092 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0093 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0094 // State: Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0095 PORTC=(1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0096 
; 0000 0097 // Port D initialization
; 0000 0098 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0099 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 009B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 0 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: Timer 0 Stopped
; 0000 00A0 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A1 TCNT0=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer/Counter 1 initialization
; 0000 00A4 // Clock source: System Clock
; 0000 00A5 // Clock value: Timer1 Stopped
; 0000 00A6 // Mode: Normal top=0xFFFF
; 0000 00A7 // OC1A output: Disconnected
; 0000 00A8 // OC1B output: Disconnected
; 0000 00A9 // Noise Canceler: Off
; 0000 00AA // Input Capture on Falling Edge
; 0000 00AB // Timer1 Overflow Interrupt: Off
; 0000 00AC // Input Capture Interrupt: Off
; 0000 00AD // Compare A Match Interrupt: Off
; 0000 00AE // Compare B Match Interrupt: Off
; 0000 00AF TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00B0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B1 TCNT1H=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00B2 TCNT1L=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B3 ICR1H=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B4 ICR1L=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B5 OCR1AH=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00B6 OCR1AL=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B7 OCR1BH=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00B8 OCR1BL=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B9 
; 0000 00BA // Timer/Counter 2 initialization
; 0000 00BB // Clock source: System Clock
; 0000 00BC // Clock value: 1000.000 kHz
; 0000 00BD // Mode: Normal top=0xFF
; 0000 00BE // OC2 output: Disconnected
; 0000 00BF // Timer Period: 0.256 ms
; 0000 00C0 ASSR=0<<AS2;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00C1 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C2 TCNT2=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00C3 OCR2=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C4 
; 0000 00C5 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C6 TIMSK=(1<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00C7 
; 0000 00C8 // External Interrupt(s) initialization
; 0000 00C9 // INT0: Off
; 0000 00CA // INT1: Off
; 0000 00CB MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00CC 
; 0000 00CD // USART initialization
; 0000 00CE // USART disabled
; 0000 00CF UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00D0 
; 0000 00D1 // Analog Comparator initialization
; 0000 00D2 // Analog Comparator: Off
; 0000 00D3 // The Analog Comparator's positive input is
; 0000 00D4 // connected to the AIN0 pin
; 0000 00D5 // The Analog Comparator's negative input is
; 0000 00D6 // connected to the AIN1 pin
; 0000 00D7 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00D8 
; 0000 00D9 // ADC initialization
; 0000 00DA // ADC Clock frequency: 1000.000 kHz
; 0000 00DB // ADC Voltage Reference: AREF pin
; 0000 00DC // Only the 8 most significant bits of
; 0000 00DD // the AD conversion result are used
; 0000 00DE ADMUX=ADC_VREF_TYPE;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00DF ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00E0 SFIOR=(0<<ACME);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00E1 
; 0000 00E2 // SPI initialization
; 0000 00E3 // SPI disabled
; 0000 00E4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00E5 
; 0000 00E6 // TWI initialization
; 0000 00E7 // TWI disabled
; 0000 00E8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00E9 
; 0000 00EA // Globally enable interrupts
; 0000 00EB #asm("sei")
;PCODE: $000000B8 VOL: 0
; 0000 00EC 
; 0000 00ED while (1) {
;PCODE: $000000B9 VOL: 0
; 0000 00EE // Place your code here
; 0000 00EF if(PINC.2==0) {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00F0 //   OCR2=read_adc(0);
; 0000 00F1 forward();
;PCODE: $000000BD VOL: 0
; 0000 00F2 
; 0000 00F3 PORTB.1=1;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F4 PORTB.2=0;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F5 PORTB.3=1;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F6 }
; 0000 00F7 else if(PINC.3==0) {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F8 OCR2=read_adc(0);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F9 left();
;PCODE: $000000CC VOL: 0
; 0000 00FA PORTB.1=1;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00FB PORTB.2=1;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00FC PORTB.3=1;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00FD }
; 0000 00FE else if(PINC.4==0) {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00FF OCR2=read_adc(0);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0100 right();
;PCODE: $000000DB VOL: 0
; 0000 0101 PORTB.1=1;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0102 PORTB.2=0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0103 PORTB.3=0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0104 }
; 0000 0105 else if(PINC.5==0) {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0106 OCR2=read_adc(0);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0107 reverse();
;PCODE: $000000EA VOL: 0
; 0000 0108 PORTB.1=0;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0109 PORTB.2=0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 010A PORTB.3=1;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 010B }
; 0000 010C else {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 010D stop();
;PCODE: $000000F3 VOL: 0
; 0000 010E }
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 010F }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0110 }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
